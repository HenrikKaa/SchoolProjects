-- VHDL Entity alien_game_lib.exercise_10_arbiter.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop10.tuni.fi)
--          at - 14:46:25 11/22/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY exercise_10_arbiter IS
   PORT( 
      R0  : IN     std_logic;
      R1  : IN     std_logic;
      R2  : IN     std_logic;
      clk : IN     std_logic;
      rst : IN     std_logic;
      G0  : OUT    std_logic;
      G1  : OUT    std_logic;
      G2  : OUT    std_logic
   );

-- Declarations

END exercise_10_arbiter ;

--
-- VHDL Architecture alien_game_lib.exercise_10_arbiter.fsm
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop10.tuni.fi)
--          at - 14:46:25 11/22/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF exercise_10_arbiter IS

   -- Architecture Declarations
   SIGNAL grant_counter : integer RANGE 1024 DOWNTO 0;  
   SIGNAL r0_counter : integer RANGE 4096 DOWNTO 0;  
   SIGNAL r1_counter : integer RANGE 4096 DOWNTO 0;  
   SIGNAL r2_counter : integer RANGE 4096 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      init,
      s0,
      s1,
      s2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= init;
         -- Default Reset Values
         r0_counter <= 0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      R0,
      R1,
      R2,
      current_state,
      r0_counter,
      r1_counter,
      r2_counter
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            IF (r0_counter >= (r1_counter AND ( R1 & R1 )) AND 
                r0_counter >= r2_counter AND 
                R0 = '1') THEN 
               next_state <= s0;
            ELSIF (r1_counter >= r2_counter) THEN 
               next_state <= s1;
            ELSIF (R2 = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= init;
            END IF;
         WHEN s0 => 
            next_state <= s0;
         WHEN s1 => 
            next_state <= s1;
         WHEN s2 => 
            next_state <= s2;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
END fsm;

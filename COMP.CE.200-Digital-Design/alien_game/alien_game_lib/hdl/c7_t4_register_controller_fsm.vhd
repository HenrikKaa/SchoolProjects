-- VHDL Entity alien_game_lib.c7_t4_register_controller.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 17:54:07 12/04/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c7_t4_register_controller IS
   PORT( 
      clk           : IN     std_logic;
      frame_done    : IN     std_logic;
      rst_n         : IN     std_logic;
      module_select : OUT    std_logic;
      nullify_0     : OUT    std_logic;
      nullify_1     : OUT    std_logic;
      write_ready   : OUT    std_logic
   );

-- Declarations

END c7_t4_register_controller ;

--
-- VHDL Architecture alien_game_lib.c7_t4_register_controller.fsm
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 17:54:07 12/04/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c7_t4_register_controller IS

   TYPE STATE_TYPE IS (
      module0_read,
      module1_read,
      module0_reset,
      module1_reset
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL module_select_cld : std_logic ;
   SIGNAL nullify_0_cld : std_logic ;
   SIGNAL nullify_1_cld : std_logic ;
   SIGNAL write_ready_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= module0_read;
         -- Default Reset Values
         module_select_cld <= '0';
         nullify_0_cld <= '0';
         nullify_1_cld <= '0';
         write_ready_cld <= '0';
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals
         nullify_0_cld <= '0';
         nullify_1_cld <= '0';
         write_ready_cld <= '1';

         -- Combined Actions
         CASE current_state IS
            WHEN module0_read => 
               module_select_cld <= '0';
               write_ready_cld <= '1';
            WHEN module1_read => 
               module_select_cld <= '1';
               write_ready_cld <= '1';
            WHEN module0_reset => 
               module_select_cld <= '1';
               nullify_0_cld <= '1';
               write_ready_cld <= '0';
            WHEN module1_reset => 
               module_select_cld <= '0';
               nullify_1_cld <= '1';
               write_ready_cld <= '0';
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      frame_done
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN module0_read => 
            IF (frame_done = '1') THEN 
               next_state <= module0_reset;
            ELSE
               next_state <= module0_read;
            END IF;
         WHEN module1_read => 
            IF (frame_done = '1') THEN 
               next_state <= module1_reset;
            ELSE
               next_state <= module1_read;
            END IF;
         WHEN module0_reset => 
            next_state <= module1_read;
         WHEN module1_reset => 
            next_state <= module0_read;
         WHEN OTHERS =>
            next_state <= module0_read;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   module_select <= module_select_cld;
   nullify_0 <= nullify_0_cld;
   nullify_1 <= nullify_1_cld;
   write_ready <= write_ready_cld;
END fsm;

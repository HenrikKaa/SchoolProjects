-- VHDL Entity alien_game_lib.c7_t4_register_row.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop13.tuni.fi)
--          at - 20:35:37 12/05/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c7_t4_register_row IS
   PORT( 
      clk      : IN     std_logic;
      nullify  : IN     std_logic;
      pixd_in  : IN     std_logic_vector (23 DOWNTO 0);
      rst_n    : IN     std_logic;
      write    : IN     std_logic;
      x        : IN     std_logic_vector (7 DOWNTO 0);
      pixd_out : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END c7_t4_register_row ;

--
-- VHDL Architecture alien_game_lib.c7_t4_register_row.struct
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop13.tuni.fi)
--          at - 20:35:36 12/05/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c7_t4_register_row IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dout     : std_logic;
   SIGNAL dout1    : std_logic;
   SIGNAL dout10   : std_logic;
   SIGNAL dout11   : std_logic;
   SIGNAL dout12   : std_logic;
   SIGNAL dout13   : std_logic;
   SIGNAL dout14   : std_logic;
   SIGNAL dout15   : std_logic;
   SIGNAL dout16   : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout17   : std_logic;
   SIGNAL dout18   : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout2    : std_logic;
   SIGNAL dout3    : std_logic;
   SIGNAL dout4    : std_logic;
   SIGNAL dout5    : std_logic;
   SIGNAL dout6    : std_logic;
   SIGNAL dout7    : std_logic;
   SIGNAL dout8    : std_logic;
   SIGNAL dout9    : std_logic;
   SIGNAL pix_out  : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out1 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out2 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out3 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out4 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out5 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out6 : std_logic_vector(23 DOWNTO 0);
   SIGNAL pix_out7 : std_logic_vector(23 DOWNTO 0);


   -- Component Declarations
   COMPONENT c7_t4_register_single
   PORT (
      clk     : IN     std_logic ;
      nullify : IN     std_logic ;
      pix_d   : IN     std_logic_vector (23 DOWNTO 0);
      rst_n   : IN     std_logic ;
      write   : IN     std_logic ;
      pix_out : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c7_t4_register_single USE ENTITY alien_game_lib.c7_t4_register_single;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_9' of 'constval'
   dout <= '0';

   -- ModuleWare code(v1.12) for instance 'U_10' of 'constval'
   dout1 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_12' of 'constval'
   dout2 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_14' of 'constval'
   dout3 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_16' of 'constval'
   dout4 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_18' of 'constval'
   dout5 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_20' of 'constval'
   dout6 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_22' of 'constval'
   dout7 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_27' of 'constval'
   dout18 <= "000000000000000000000000";

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(dout, write, x)
   BEGIN
      CASE x(2) IS
      WHEN '0' => dout10 <= dout;
      WHEN '1' => dout10 <= write;
      WHEN OTHERS => dout10 <= 'X';
      END CASE;
   END PROCESS u_8combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'mux'
   u_11combo_proc: PROCESS(dout1, write, x)
   BEGIN
      CASE x(4) IS
      WHEN '0' => dout12 <= dout1;
      WHEN '1' => dout12 <= write;
      WHEN OTHERS => dout12 <= 'X';
      END CASE;
   END PROCESS u_11combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_13' of 'mux'
   u_13combo_proc: PROCESS(dout2, write, x)
   BEGIN
      CASE x(5) IS
      WHEN '0' => dout13 <= dout2;
      WHEN '1' => dout13 <= write;
      WHEN OTHERS => dout13 <= 'X';
      END CASE;
   END PROCESS u_13combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_15' of 'mux'
   u_15combo_proc: PROCESS(dout3, write, x)
   BEGIN
      CASE x(6) IS
      WHEN '0' => dout14 <= dout3;
      WHEN '1' => dout14 <= write;
      WHEN OTHERS => dout14 <= 'X';
      END CASE;
   END PROCESS u_15combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_17' of 'mux'
   u_17combo_proc: PROCESS(dout4, write, x)
   BEGIN
      CASE x(7) IS
      WHEN '0' => dout15 <= dout4;
      WHEN '1' => dout15 <= write;
      WHEN OTHERS => dout15 <= 'X';
      END CASE;
   END PROCESS u_17combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_19' of 'mux'
   u_19combo_proc: PROCESS(dout5, write, x)
   BEGIN
      CASE x(3) IS
      WHEN '0' => dout11 <= dout5;
      WHEN '1' => dout11 <= write;
      WHEN OTHERS => dout11 <= 'X';
      END CASE;
   END PROCESS u_19combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_21' of 'mux'
   u_21combo_proc: PROCESS(dout6, write, x)
   BEGIN
      CASE x(1) IS
      WHEN '0' => dout8 <= dout6;
      WHEN '1' => dout8 <= write;
      WHEN OTHERS => dout8 <= 'X';
      END CASE;
   END PROCESS u_21combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_23' of 'mux'
   u_23combo_proc: PROCESS(dout7, write, x)
   BEGIN
      CASE x(0) IS
      WHEN '0' => dout9 <= dout7;
      WHEN '1' => dout9 <= write;
      WHEN OTHERS => dout9 <= 'X';
      END CASE;
   END PROCESS u_23combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_25' of 'mux'
   u_25combo_proc: PROCESS(dout18, dout16, dout17)
   BEGIN
      CASE dout17 IS
      WHEN '0' => pixd_out <= dout18;
      WHEN '1' => pixd_out <= dout16;
      WHEN OTHERS => pixd_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_25combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_24' of 'omux'
   u_24combo_proc: PROCESS(pix_out, pix_out1, pix_out2, pix_out3, 
                           pix_out4, pix_out5, pix_out6, pix_out7, x)
   BEGIN
      dout16 <= (OTHERS => 'X');
      CASE x IS
      WHEN "00000001" => dout16 <= pix_out;
      WHEN "00000010" => dout16 <= pix_out1;
      WHEN "00000100" => dout16 <= pix_out2;
      WHEN "00001000" => dout16 <= pix_out3;
      WHEN "00010000" => dout16 <= pix_out4;
      WHEN "00100000" => dout16 <= pix_out5;
      WHEN "01000000" => dout16 <= pix_out6;
      WHEN "10000000" => dout16 <= pix_out7;
      WHEN OTHERS => dout16 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_24combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_26' of 'or'
   dout17 <= x(7) OR x(6) OR x(5) OR x(4) OR x(3) OR x(2) OR x(1) OR x(0);

   -- Instance port mappings.
   U_0 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout9,
         pix_out => pix_out
      );
   U_1 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout8,
         pix_out => pix_out1
      );
   U_2 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout10,
         pix_out => pix_out2
      );
   U_3 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout11,
         pix_out => pix_out3
      );
   U_4 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout12,
         pix_out => pix_out4
      );
   U_5 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout13,
         pix_out => pix_out5
      );
   U_6 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout14,
         pix_out => pix_out6
      );
   U_7 : c7_t4_register_single
      PORT MAP (
         clk     => clk,
         nullify => nullify,
         pix_d   => pixd_in,
         rst_n   => rst_n,
         write   => dout15,
         pix_out => pix_out7
      );

END struct;

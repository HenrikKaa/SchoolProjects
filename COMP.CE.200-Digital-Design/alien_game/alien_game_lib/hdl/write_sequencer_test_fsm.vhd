-- VHDL Entity alien_game_lib.write_sequencer_test.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 11:52:05 11/27/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY write_sequencer_test IS
   PORT( 
      alien_defeated : IN     std_logic;
      clk            : IN     std_logic;
      it             : IN     std_logic_vector (15 DOWNTO 0);
      rst            : IN     std_logic;
      rst_n          : IN     std_logic;
      write_ready    : IN     std_logic;
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      victory_idx    : OUT    std_logic_vector (5 DOWNTO 0);
      write          : OUT    std_logic
   );

-- Declarations

END write_sequencer_test ;

--
-- VHDL Architecture alien_game_lib.write_sequencer_test.fsm
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 11:52:07 11/27/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;
 
ARCHITECTURE fsm OF write_sequencer_test IS

   -- Architecture Declarations
   SIGNAL victory_counter : integer RANGE 32 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      s0,
      alien_write,
      gun_write,
      bullet_write,
      gun_write1,
      victory_effect0,
      gun_write2,
      gun_write3,
      victory_effect,
      frame_ready,
      enable_new_frame,
      s1
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s1 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL enable_cld : std_logic ;
   SIGNAL frame_done_cld : std_logic ;
   SIGNAL gun_px_idx_cld : std_logic_vector (1 DOWNTO 0);
   SIGNAL module_select_cld : std_logic_vector (1 DOWNTO 0);
   SIGNAL victory_idx_cld : std_logic_vector (5 DOWNTO 0);
   SIGNAL write_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
         -- Default Reset Values
         enable_cld <= '0';
         frame_done_cld <= '0';
         gun_px_idx_cld <= "00";
         module_select_cld <= "00";
         write_cld <= '0';
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- Default Assignment To Internals
         enable_cld <= '0';
         frame_done_cld <= '0';
         gun_px_idx_cld <= "00";
         module_select_cld <= "00";
         write_cld <= '0';

         -- Combined Actions
         CASE current_state IS
            WHEN alien_write => 
               write_cld <= '1';
            WHEN gun_write => 
               module_select_cld <= "01"; 
               write_cld <= '1' ;
               gun_px_idx_cld <= "00";
            WHEN bullet_write => 
               module_select_cld <= "10" ; 
               write_cld <= '1' ;
            WHEN gun_write1 => 
               module_select_cld <= "01"; 
               write_cld <= '1';
               gun_px_idx_cld <= "01";
            WHEN victory_effect0 => 
               victory_counter <= 0;
               write_cld <= '1';
            WHEN gun_write2 => 
               module_select_cld <= "01"; 
               write_cld <= '1' ;
               gun_px_idx_cld <= "10";
            WHEN gun_write3 => 
               module_select_cld <= "01" ; 
               write_cld <= '1' ;
               gun_px_idx_cld <= "11";
            WHEN victory_effect => 
               module_select_cld <= "11" ; 
               write_cld <= '1' ;
               
               victory_counter <= victory_counter + 1;
               victory_idx_cld <= std_logic_vector(
                  to_signed(victory_counter, victory_idx_cld'length));
            WHEN frame_ready => 
               frame_done_cld <= '1';
            WHEN enable_new_frame => 
               enable_cld <= '1' ;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      csm_timeout,
      current_state,
      victory_counter,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s1 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (write_ready = '1') THEN 
               next_state <= alien_write;
            ELSE
               next_state <= s0;
            END IF;
         WHEN alien_write => 
            next_state <= gun_write;
         WHEN gun_write => 
            next_state <= gun_write1;
         WHEN bullet_write => 
            IF (alien_defeated = '1') THEN 
               next_state <= victory_effect0;
            ELSE
               next_state <= frame_ready;
            END IF;
         WHEN gun_write1 => 
            next_state <= gun_write2;
         WHEN victory_effect0 => 
            next_state <= victory_effect;
         WHEN gun_write2 => 
            next_state <= gun_write3;
         WHEN gun_write3 => 
            next_state <= bullet_write;
         WHEN victory_effect => 
            IF (victory_counter >= 63) THEN 
               next_state <= frame_ready;
            ELSE
               next_state <= victory_effect;
            END IF;
         WHEN frame_ready => 
            next_state <= enable_new_frame;
         WHEN enable_new_frame => 
            next_state <= s1;
            csm_to_s1 <= '1';
         WHEN s1 => 
            IF (csm_timeout = '1' AND (write_ready = '1')) THEN 
               next_state <= alien_write;
            ELSE
               next_state <= s1;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s1
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s1 = '1') THEN
         csm_next_timer <= "100110001001011001111111"; -- no cycles(10000000)-1=9999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= std_logic_vector(unsigned(csm_timer) - 1);
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   enable <= enable_cld;
   frame_done <= frame_done_cld;
   gun_px_idx <= gun_px_idx_cld;
   module_select <= module_select_cld;
   victory_idx <= victory_idx_cld;
   write <= write_cld;
END fsm;

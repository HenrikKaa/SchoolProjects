-- VHDL Entity alien_game_lib.c5_t3_button_debounce.symbol
--
-- Created:
--          by - palviain.palviain (linux-desktop2.tuni.fi)
--          at - 22:49:11 11/10/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t3_button_debounce IS
   PORT( 
      btn_in  : IN     std_logic;
      clk     : IN     std_logic;
      rst     : IN     std_logic;
      btn_out : OUT    std_logic
   );

-- Declarations

END c5_t3_button_debounce ;

--
-- VHDL Architecture alien_game_lib.c5_t3_button_debounce.fsm
--
-- Created:
--          by - palviain.palviain (linux-desktop2.tuni.fi)
--          at - 16:23:24 11/11/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t3_button_debounce IS

   -- Architecture Declarations
   SIGNAL incr : integer RANGE 250001 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      idle,
      button_pressed,
      wait_osc_to_end,
      wait_osc_to_end_2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(13 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(13 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_wait_osc_to_end : std_logic;
   SIGNAL csm_to_wait_osc_to_end_2 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL btn_out_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= idle;
         csm_timer <= (OTHERS => '0');
         -- Default Reset Values
         btn_out_cld <= '0';
         incr <= 0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- Default Assignment To Internals
         btn_out_cld <= '0';

         -- Combined Actions
         CASE current_state IS
            WHEN idle => 
               btn_out_cld <= '0';
            WHEN button_pressed => 
               btn_out_cld <= '1';
            WHEN wait_osc_to_end => 
               btn_out_cld <= '0';
            WHEN wait_osc_to_end_2 => 
               btn_out_cld <= '0';
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      btn_in,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_wait_osc_to_end <= '0';
      csm_to_wait_osc_to_end_2 <= '0';
      CASE current_state IS
         WHEN idle => 
            IF (btn_in = '0') THEN 
               next_state <= idle;
            ELSIF (btn_in = '1') THEN 
               next_state <= button_pressed;
            ELSE
               next_state <= idle;
            END IF;
         WHEN button_pressed => 
            next_state <= wait_osc_to_end;
            csm_to_wait_osc_to_end <= '1';
         WHEN wait_osc_to_end => 
            IF (csm_timeout = '1' AND (btn_in = '0')) THEN 
               next_state <= wait_osc_to_end_2;
               csm_to_wait_osc_to_end_2 <= '1';
            ELSE
               next_state <= wait_osc_to_end;
            END IF;
         WHEN wait_osc_to_end_2 => 
            IF (csm_timeout = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= wait_osc_to_end_2;
            END IF;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_wait_osc_to_end,
      csm_to_wait_osc_to_end_2
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_wait_osc_to_end = '1') THEN
         csm_next_timer <= "10011100001111"; -- no cycles(10000)-1=9999
      ELSIF (csm_to_wait_osc_to_end_2 = '1') THEN
         csm_next_timer <= "10011100001111"; -- no cycles(10000)-1=9999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   btn_out <= btn_out_cld;
END fsm;

-- VHDL Entity alien_game_lib.c7_t4_register_bank.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop13.tuni.fi)
--          at - 20:20:39 12/05/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c7_t4_register_bank IS
   PORT( 
      clk        : IN     std_logic;
      frame_done : IN     std_logic;
      pixd_in    : IN     std_logic_vector (23 DOWNTO 0);
      rst_n      : IN     std_logic;
      write      : IN     std_logic;
      xr         : IN     std_logic_vector (7 DOWNTO 0);
      xw         : IN     std_logic_vector (7 DOWNTO 0);
      yr         : IN     std_logic_vector (7 DOWNTO 0);
      yw         : IN     std_logic_vector (7 DOWNTO 0);
      pixd_out   : OUT    std_logic_vector (23 DOWNTO 0);
      w_rdy      : OUT    std_logic
   );

-- Declarations

END c7_t4_register_bank ;

--
-- VHDL Architecture alien_game_lib.c7_t4_register_bank.struct
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop13.tuni.fi)
--          at - 20:20:39 12/05/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c7_t4_register_bank IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dout          : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout1         : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout2         : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout3         : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout4         : std_logic;
   SIGNAL dout5         : std_logic;
   SIGNAL dout6         : std_logic;
   SIGNAL dout7         : std_logic;
   SIGNAL module_select : std_logic;
   SIGNAL nullify_0     : std_logic;
   SIGNAL nullify_1     : std_logic;
   SIGNAL pixd_out1     : std_logic_vector(23 DOWNTO 0);
   SIGNAL pixd_out2     : std_logic_vector(23 DOWNTO 0);


   -- Component Declarations
   COMPONENT c7_t4_register_columns
   PORT (
      clk      : IN     std_logic ;
      nullify  : IN     std_logic ;
      pixd_in  : IN     std_logic_vector (23 DOWNTO 0);
      rst_n    : IN     std_logic ;
      write    : IN     std_logic ;
      x        : IN     std_logic_vector (7 DOWNTO 0);
      y        : IN     std_logic_vector (7 DOWNTO 0);
      pixd_out : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c7_t4_register_controller
   PORT (
      clk           : IN     std_logic ;
      frame_done    : IN     std_logic ;
      rst_n         : IN     std_logic ;
      module_select : OUT    std_logic ;
      nullify_0     : OUT    std_logic ;
      nullify_1     : OUT    std_logic ;
      write_ready   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c7_t4_register_columns USE ENTITY alien_game_lib.c7_t4_register_columns;
   FOR ALL : c7_t4_register_controller USE ENTITY alien_game_lib.c7_t4_register_controller;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_9' of 'constval'
   dout4 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_10' of 'constval'
   dout5 <= '0';

   -- ModuleWare code(v1.12) for instance 'U_0' of 'mux'
   u_0combo_proc: PROCESS(pixd_out1, pixd_out2, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => pixd_out <= pixd_out1;
      WHEN '1' => pixd_out <= pixd_out2;
      WHEN OTHERS => pixd_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_0combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_3' of 'mux'
   u_3combo_proc: PROCESS(xr, xw, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout3 <= xr;
      WHEN '1' => dout3 <= xw;
      WHEN OTHERS => dout3 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_3combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(yr, yw, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout2 <= yr;
      WHEN '1' => dout2 <= yw;
      WHEN OTHERS => dout2 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'mux'
   u_5combo_proc: PROCESS(yw, yr, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout <= yw;
      WHEN '1' => dout <= yr;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_5combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(xw, xr, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout1 <= xw;
      WHEN '1' => dout1 <= xr;
      WHEN OTHERS => dout1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(write, dout5, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout7 <= write;
      WHEN '1' => dout7 <= dout5;
      WHEN OTHERS => dout7 <= 'X';
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(dout4, write, module_select)
   BEGIN
      CASE module_select IS
      WHEN '0' => dout6 <= dout4;
      WHEN '1' => dout6 <= write;
      WHEN OTHERS => dout6 <= 'X';
      END CASE;
   END PROCESS u_8combo_proc;

   -- Instance port mappings.
   U_1 : c7_t4_register_columns
      PORT MAP (
         clk      => clk,
         nullify  => nullify_1,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         write    => dout7,
         x        => dout1,
         y        => dout,
         pixd_out => pixd_out2
      );
   U_2 : c7_t4_register_columns
      PORT MAP (
         clk      => clk,
         nullify  => nullify_0,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         write    => dout6,
         x        => dout3,
         y        => dout2,
         pixd_out => pixd_out1
      );
   U_11 : c7_t4_register_controller
      PORT MAP (
         clk           => clk,
         frame_done    => frame_done,
         rst_n         => rst_n,
         module_select => module_select,
         nullify_0     => nullify_0,
         nullify_1     => nullify_1,
         write_ready   => w_rdy
      );

END struct;

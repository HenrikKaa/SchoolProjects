-- VHDL Entity alien_game_lib.alien_game_logic.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop9.tuni.fi)
--          at - 14:30:19 11/23/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY alien_game_logic IS
   PORT( 
      btn           : IN     std_logic_vector (3 DOWNTO 0);
      clk           : IN     std_logic;
      rst_n         : IN     std_logic;
      write_ready   : IN     std_logic;
      color_bgr_out : OUT    std_logic_vector (23 DOWNTO 0);
      frame_done    : OUT    std_logic;
      write         : OUT    std_logic;
      x_coord_out   : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord_out   : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END alien_game_logic ;

--
-- VHDL Architecture alien_game_lib.alien_game_logic.struct
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop1.tuni.fi)
--          at - 14:58:14 11/28/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF alien_game_logic IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL color         : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_bgr     : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_bgr1    : std_logic_vector(23 DOWNTO 0);
   SIGNAL d             : std_logic;
   SIGNAL defeated      : std_logic;
   SIGNAL din0          : std_logic;
   SIGNAL dout          : std_logic_vector(7 DOWNTO 0);
   SIGNAL enable        : std_logic;
   SIGNAL gun_col       : std_logic_vector(23 DOWNTO 0);
   SIGNAL gun_px_idx    : std_logic_vector(1 DOWNTO 0);
   SIGNAL hit           : std_logic;
   SIGNAL module_select : std_logic_vector(1 DOWNTO 0);
   SIGNAL q             : std_logic;
   SIGNAL victory_idx   : std_logic_vector(3 DOWNTO 0);
   SIGNAL x_coord       : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord1      : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_coord2      : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_out         : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord       : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord1      : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_coord2      : std_logic_vector(7 DOWNTO 0);
   SIGNAL y_out         : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'adff'
   SIGNAL mw_U_9reg_cval : std_logic;

   -- Component Declarations
   COMPONENT c2_t6_basic_alien_top
   PORT (
      clk       : IN     std_logic ;
      enable    : IN     std_logic ;
      hit       : IN     std_logic ;
      rst_n     : IN     std_logic ;
      color_bgr : OUT    std_logic_vector (23 DOWNTO 0);
      defeated  : OUT    std_logic ;
      x_coord   : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord   : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t1_gun_module_top
   PORT (
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic ;
      enable     : IN     std_logic ;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic ;
      gun_col    : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord    : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t2_bullet_top
   PORT (
      btn         : IN     std_logic_vector (3 DOWNTO 0);
      clk         : IN     std_logic ;
      enable      : IN     std_logic ;
      gun_x_coord : IN     std_logic_vector (7 DOWNTO 0);
      rst_n       : IN     std_logic ;
      color       : OUT    std_logic_vector (23 DOWNTO 0);
      x_out       : OUT    std_logic_vector (7 DOWNTO 0);
      y_out       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c5_t1_hit_detector_top
   PORT (
      alien_x  : IN     std_logic_vector (7 DOWNTO 0);
      alien_y  : IN     std_logic_vector (7 DOWNTO 0);
      bullet_x : IN     std_logic_vector (7 DOWNTO 0);
      bullet_y : IN     std_logic_vector (7 DOWNTO 0);
      clk      : IN     std_logic ;
      rst_n    : IN     std_logic ;
      hit      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c5_t2_write_sequencer
   PORT (
      alien_defeated : IN     std_logic ;
      clk            : IN     std_logic ;
      gun_defeated   : IN     std_logic ;
      rst_n          : IN     std_logic ;
      write_ready    : IN     std_logic ;
      enable         : OUT    std_logic ;
      frame_done     : OUT    std_logic ;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      victory_idx    : OUT    std_logic_vector (3 DOWNTO 0);
      write          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c6_t1_victory_effect
   PORT (
      alien_won     : IN     std_logic ;
      clk           : IN     std_logic ;
      end_effect_px : IN     std_logic_vector (3 DOWNTO 0);
      rst_n         : IN     std_logic ;
      color_bgr     : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord       : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t6_basic_alien_top USE ENTITY alien_game_lib.c2_t6_basic_alien_top;
   FOR ALL : c3_t1_gun_module_top USE ENTITY alien_game_lib.c3_t1_gun_module_top;
   FOR ALL : c3_t2_bullet_top USE ENTITY alien_game_lib.c3_t2_bullet_top;
   FOR ALL : c5_t1_hit_detector_top USE ENTITY alien_game_lib.c5_t1_hit_detector_top;
   FOR ALL : c5_t2_write_sequencer USE ENTITY alien_game_lib.c5_t2_write_sequencer;
   FOR ALL : c6_t1_victory_effect USE ENTITY alien_game_lib.c6_t1_victory_effect;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_9' of 'adff'
   q <= mw_U_9reg_cval;
   u_9seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_9reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_9reg_cval <= d;
      END IF;
   END PROCESS u_9seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'constval'
   dout <= "01000000";

   -- ModuleWare code(v1.12) for instance 'U_2' of 'mux'
   u_2combo_proc: PROCESS(x_coord, x_coord1, x_out, x_coord2, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => x_coord_out <= x_coord;
      WHEN "01" => x_coord_out <= x_coord1;
      WHEN "10" => x_coord_out <= x_out;
      WHEN "11" => x_coord_out <= x_coord2;
      WHEN OTHERS => x_coord_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_2combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_3' of 'mux'
   u_3combo_proc: PROCESS(y_coord, y_coord1, y_out, y_coord2, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => y_coord_out <= y_coord;
      WHEN "01" => y_coord_out <= y_coord1;
      WHEN "10" => y_coord_out <= y_out;
      WHEN "11" => y_coord_out <= y_coord2;
      WHEN OTHERS => y_coord_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_3combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(color_bgr, gun_col, color, color_bgr1, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => color_bgr_out <= color_bgr;
      WHEN "01" => color_bgr_out <= gun_col;
      WHEN "10" => color_bgr_out <= color;
      WHEN "11" => color_bgr_out <= color_bgr1;
      WHEN OTHERS => color_bgr_out <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'or'
   d <= din0 OR q;

   -- Instance port mappings.
   U_1 : c2_t6_basic_alien_top
      PORT MAP (
         clk       => clk,
         enable    => enable,
         hit       => hit,
         rst_n     => rst_n,
         color_bgr => color_bgr,
         defeated  => defeated,
         x_coord   => x_coord,
         y_coord   => y_coord
      );
   U_5 : c3_t1_gun_module_top
      PORT MAP (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         gun_col    => gun_col,
         x_coord    => x_coord1,
         y_coord    => y_coord1
      );
   U_7 : c3_t2_bullet_top
      PORT MAP (
         btn         => btn,
         clk         => clk,
         enable      => enable,
         gun_x_coord => x_coord1,
         rst_n       => rst_n,
         color       => color,
         x_out       => x_out,
         y_out       => y_out
      );
   alien_hit_detector : c5_t1_hit_detector_top
      PORT MAP (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_out,
         bullet_y => y_out,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit
      );
   gun_hit_detector : c5_t1_hit_detector_top
      PORT MAP (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_coord1,
         bullet_y => dout,
         clk      => clk,
         rst_n    => rst_n,
         hit      => din0
      );
   U_0 : c5_t2_write_sequencer
      PORT MAP (
         alien_defeated => defeated,
         clk            => clk,
         gun_defeated   => q,
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         victory_idx    => victory_idx,
         write          => write
      );
   U_8 : c6_t1_victory_effect
      PORT MAP (
         alien_won     => q,
         clk           => clk,
         end_effect_px => victory_idx,
         rst_n         => rst_n,
         color_bgr     => color_bgr1,
         x_coord       => x_coord2,
         y_coord       => y_coord2
      );

END struct;

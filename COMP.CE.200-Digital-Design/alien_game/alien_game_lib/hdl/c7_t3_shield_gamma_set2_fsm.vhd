-- VHDL Entity alien_game_lib.c7_t3_shield_gamma_set2.symbol
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 15:38:41 12/04/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c7_t3_shield_gamma_set2 IS
   PORT( 
      clk      : IN     std_logic;
      rst_n    : IN     std_logic;
      rx_rdy   : IN     std_logic;
      bit_out  : OUT    std_logic;
      lat      : OUT    std_logic;
      sb       : OUT    std_logic;
      transmit : OUT    std_logic
   );

-- Declarations

END c7_t3_shield_gamma_set2 ;

--
-- VHDL Architecture alien_game_lib.c7_t3_shield_gamma_set2.fsm
--
-- Created:
--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)
--          at - 15:49:31 12/04/20
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c7_t3_shield_gamma_set2 IS

   -- Architecture Declarations
   SIGNAL counter : integer RANGE 24 DOWNTO 0;  
   SIGNAL counter_row : integer RANGE 8 DOWNTO 0;  
   SIGNAL gamma : std_logic_vector(17 DOWNTO 0);  

   TYPE STATE_TYPE IS (
      init,
      s0,
      s1,
      s2,
      s3,
      s4
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(1 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(1 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s0 : std_logic;
   SIGNAL csm_to_s2 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL bit_out_cld : std_logic ;
   SIGNAL lat_cld : std_logic ;
   SIGNAL sb_cld : std_logic ;
   SIGNAL transmit_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
         csm_timer <= (OTHERS => '0');
         -- Default Reset Values
         bit_out_cld <= '0';
         lat_cld <= '0';
         sb_cld <= '0';
         transmit_cld <= '0';
         counter <= 0;
         counter_row <= 0;
         gamma <= "011100111111110111";
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         -- Combined Actions
         CASE current_state IS
            WHEN s0 => 
               IF (csm_timeout = '1' AND (counter < 18 AND counter_row < 8)) THEN 
                  bit_out_cld <= gamma(counter);
               ELSIF (csm_timeout = '1' AND (counter = 18 AND counter_row < 8)) THEN 
                  counter <= 0;
                  counter_row <= counter_row +1;
               ELSIF (csm_timeout = '1') THEN 
                  lat_cld <= '1';
               END IF;
            WHEN s1 => 
               IF (rx_rdy = '1') THEN 
                  transmit_cld <= '1';
               END IF;
            WHEN s2 => 
               IF (csm_timeout = '1') THEN 
                  transmit_cld <= '0';
                  counter <= counter +1;
               END IF;
            WHEN s3 => 
               lat_cld <= '0';
               sb_cld <= '1';
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      counter,
      counter_row,
      csm_timeout,
      current_state,
      rx_rdy
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s0 <= '0';
      csm_to_s2 <= '0';
      CASE current_state IS
         WHEN init => 
            IF (rx_rdy = '1') THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
            ELSE
               next_state <= init;
            END IF;
         WHEN s0 => 
            IF (csm_timeout = '1' AND (counter < 18 AND counter_row < 8)) THEN 
               next_state <= s1;
            ELSIF (csm_timeout = '1' AND (counter = 18 AND counter_row < 8)) THEN 
               next_state <= s0;
            ELSIF (csm_timeout = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (rx_rdy = '1') THEN 
               next_state <= s2;
               csm_to_s2 <= '1';
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s0;
               csm_to_s0 <= '1';
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            next_state <= s4;
         WHEN s4 => 
            next_state <= s4;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s0,
      csm_to_s2
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s0 = '1') THEN
         csm_next_timer <= "10"; -- no cycles(3)-1=2
      ELSIF (csm_to_s2 = '1') THEN
         csm_next_timer <= "10"; -- no cycles(3)-1=2
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

   -- Concurrent Statements
   -- Clocked output assignments
   bit_out <= bit_out_cld;
   lat <= lat_cld;
   sb <= sb_cld;
   transmit <= transmit_cld;
END fsm;

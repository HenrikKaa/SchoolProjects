<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:37:00 on 12/04/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.alien_game_logic.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop9.tuni.fi)</span>
<span class=C>--          at - 14:30:19 11&#47;23&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> alien_game_logic <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn           : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color_bgr_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x_coord_out   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord_out   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> alien_game_logic ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.alien_game_logic.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop1.tuni.fi)</span>
<span class=C>--          at - 14:58:14 11&#47;28&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> alien_game_logic <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> color         : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color_bgr     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> color_bgr1    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> d             : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> defeated      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> din0          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable        : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_col       : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> gun_px_idx    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q             : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> victory_idx   : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_out         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord1      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord2      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_out         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_9reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t6_basic_alien_top
   <span class=K>PORT</span> (
      clk       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color_bgr : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      defeated  : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t1_gun_module_top
   <span class=K>PORT</span> (
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_col    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t2_bullet_top
   <span class=K>PORT</span> (
      btn         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x_coord : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_out       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_out       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t1_hit_detector_top
   <span class=K>PORT</span> (
      alien_x  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t2_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_defeated   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      victory_idx    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c6_t1_victory_effect
   <span class=K>PORT</span> (
      alien_won     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      end_effect_px : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color_bgr     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t6_basic_alien_top <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t6_basic_alien_top;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_gun_module_top <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_gun_module_top;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t2_bullet_top <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t2_bullet_top;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t1_hit_detector_top <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t1_hit_detector_top;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t2_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t2_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c6_t1_victory_effect <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c6_t1_victory_effect;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'adff'</span>
   q <= mw_U_9reg_cval;
   u_9seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_9reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_9reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'constval'</span>
   dout <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(x_coord, x_coord1, x_out, x_coord2,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => x_coord_out <= x_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => x_coord_out <= x_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => x_coord_out <= x_out;
      <span class=K>WHEN</span> <span class=S>"11"</span> => x_coord_out <= x_coord2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_coord_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'mux'</span>
   u_3combo_proc: <span class=K>PROCESS</span>(y_coord, y_coord1, y_out, y_coord2,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_coord_out <= y_coord;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_coord_out <= y_coord1;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_coord_out <= y_out;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_coord_out <= y_coord2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_3combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(color_bgr, gun_col, color, color_bgr1,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => color_bgr_out <= color_bgr;
      <span class=K>WHEN</span> <span class=S>"01"</span> => color_bgr_out <= gun_col;
      <span class=K>WHEN</span> <span class=S>"10"</span> => color_bgr_out <= color;
      <span class=K>WHEN</span> <span class=S>"11"</span> => color_bgr_out <= color_bgr1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => color_bgr_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'or'</span>
   d <= din0 <span class=K>OR</span> q;

   <span class=C>-- Instance port mappings.</span>
   U_1 : c2_t6_basic_alien_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk       => clk,
         enable    => enable,
         hit       => hit,
         rst_n     => rst_n,
         color_bgr => color_bgr,
         defeated  => defeated,
         x_coord   => x_coord,
         y_coord   => y_coord
      );
   U_5 : c3_t1_gun_module_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         gun_col    => gun_col,
         x_coord    => x_coord1,
         y_coord    => y_coord1
      );
   U_7 : c3_t2_bullet_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn         => btn,
         clk         => clk,
         enable      => enable,
         gun_x_coord => x_coord1,
         rst_n       => rst_n,
         color       => color,
         x_out       => x_out,
         y_out       => y_out
      );
   alien_hit_detector : c5_t1_hit_detector_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_out,
         bullet_y => y_out,
         clk      => clk,
         rst_n    => rst_n,
         hit      => hit
      );
   gun_hit_detector : c5_t1_hit_detector_top
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => x_coord,
         alien_y  => y_coord,
         bullet_x => x_coord1,
         bullet_y => dout,
         clk      => clk,
         rst_n    => rst_n,
         hit      => din0
      );
   U_0 : c5_t2_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => defeated,
         clk            => clk,
         gun_defeated   => q,
         rst_n          => rst_n,
         write_ready    => write_ready,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         victory_idx    => victory_idx,
         write          => write
      );
   U_8 : c6_t1_victory_effect
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_won     => q,
         clk           => clk,
         end_effect_px => victory_idx,
         rst_n         => rst_n,
         color_bgr     => color_bgr1,
         x_coord       => x_coord2,
         y_coord       => y_coord2
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>

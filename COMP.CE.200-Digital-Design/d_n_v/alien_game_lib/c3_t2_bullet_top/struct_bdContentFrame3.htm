<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:37:26 on 12/04/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t2_bullet_top.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop1.tuni.fi)</span>
<span class=C>--          at - 14:30:00 10&#47;09&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t2_bullet_top <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn         : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_x_coord : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      rst_n       : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_out       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_out       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t2_bullet_top ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t2_bullet_top.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop3.tuni.fi)</span>
<span class=C>--          at - 02:41:51 11&#47;23&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t2_bullet_top <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> bullet_flying : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> d             : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> data_out      : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> x_out_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_out_internal : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_2' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_2reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c3_t2_bullet_move
   <span class=K>PORT</span> (
      btn_fire      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      y_in          : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_flying : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      y_out         : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t2_bullet_move <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t2_bullet_move;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   y_out_internal <= mw_U_0reg_cval;
   u_0seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_0reg_cval <= <span class=S>"00000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_0reg_cval <= dout;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'adff'</span>
   x_out_internal <= mw_U_2reg_cval;
   u_2seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_2reg_cval <= <span class=S>"00000000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_2reg_cval <= d;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'constval'</span>
   color <= <span class=S>"000000001010010111111111"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(y_out_internal, data_out, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout <= y_out_internal;
      <span class=K>WHEN</span> '1' => dout <= data_out;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'mux'</span>
   u_4combo_proc: <span class=K>PROCESS</span>(gun_x_coord, x_out_internal, bullet_flying)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> bullet_flying <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => d <= gun_x_coord;
      <span class=K>WHEN</span> '1' => d <= x_out_internal;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => d <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_4combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_3 : c3_t2_bullet_move
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn_fire      => btn(0),
         y_in          => y_out_internal,
         bullet_flying => bullet_flying,
         y_out         => data_out
      );

   <span class=C>-- Implicit buffered output assignments</span>
   x_out <= x_out_internal;
   y_out <= y_out_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:37:02 on 12/04/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.alien_game_top.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop10.tuni.fi)</span>
<span class=C>--          at - 00:23:24 11&#47;10&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> alien_game_top <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      if_you_name    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      iotre_will     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      like_this      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      of_this_course : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      throw_you_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      your_signals   : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> alien_game_top ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.alien_game_top.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 18:42:02 11&#47;27&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;
<span class=K>LIBRARY</span> pre_made;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> alien_game_top <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> color_bgr_out : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> frame_done    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> w_rdy         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> x_coord_out   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord_out   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> alien_game_logic
   <span class=K>PORT</span> (
      btn           : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color_bgr_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      x_coord_out   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord_out   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> z_black_box_y
   <span class=K>PORT</span> (
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color_BGR      : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      frame_done     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      x_coord        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      if_you_name    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      iotre_will     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      like_this      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      of_this_course : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      throw_you_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      w_rdy          : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      your_signals   : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : alien_game_logic <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.alien_game_logic;
   <span class=K>FOR</span> <span class=K>ALL</span> : z_black_box_y <span class=K>USE</span> <span class=K>ENTITY</span> pre_made.z_black_box_y;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- Instance port mappings.</span>
   U_1 : alien_game_logic
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn           => btn,
         clk           => clk,
         rst_n         => rst_n,
         write_ready   => w_rdy,
         color_bgr_out => color_bgr_out,
         frame_done    => frame_done,
         write         => write,
         x_coord_out   => x_coord_out,
         y_coord_out   => y_coord_out
      );
   U_0 : z_black_box_y
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk            => clk,
         color_BGR      => color_bgr_out,
         frame_done     => frame_done,
         rst_n          => rst_n,
         write          => write,
         x_coord        => x_coord_out,
         y_coord        => y_coord_out,
         if_you_name    => if_you_name,
         iotre_will     => iotre_will,
         like_this      => like_this,
         of_this_course => of_this_course,
         throw_you_out  => throw_you_out,
         w_rdy          => w_rdy,
         your_signals   => your_signals
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:37:32 on 12/04/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_write_sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 11:17:31 12&#47;04&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_write_sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_defeated   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      victory_idx    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_write_sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_write_sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop2.tuni.fi)</span>
<span class=C>--          at - 11:17:31 12&#47;04&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c5_t2_write_sequencer <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> victory_counter : <span class=T>integer</span> <span class=K>RANGE</span> 32 <span class=K>DOWNTO</span> 0;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      s0,
      alien_write,
      gun_write,
      frame_ready,
      enable_new_frame,
      s1,
      gun_write1,
      gun_write2,
      gun_write3,
      bullet_write,
      victory_effect0,
      victory_effect1,
      victory_effect2,
      victory_effect3,
      victory_effect4,
      victory_effect5,
      victory_effect6,
      victory_effect7,
      victory_effect8,
      victory_effect9,
      victory_effect10,
      victory_effect11,
      victory_effect12,
      victory_effect13,
      victory_effect14,
      victory_effect15
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s1 : <span class=T>std_logic</span>;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> enable_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> frame_done_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> gun_px_idx_cld : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> module_select_cld : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> victory_idx_cld : <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> write_cld : <span class=T>std_logic</span> ;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= s0;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- Default Reset Values</span>
         enable_cld <= '0';
         frame_done_cld <= '0';
         gun_px_idx_cld <= <span class=S>"00"</span>;
         module_select_cld <= <span class=S>"00"</span>;
         write_cld <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- Default Assignment To Internals</span>
         enable_cld <= '0';
         frame_done_cld <= '0';
         gun_px_idx_cld <= <span class=S>"00"</span>;
         module_select_cld <= <span class=S>"00"</span>;
         write_cld <= '0';

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> alien_write =>
               write_cld <= '1';
            <span class=K>WHEN</span> gun_write =>
               module_select_cld <= <span class=S>"01"</span>;
               write_cld <= '1' ;
               gun_px_idx_cld <= <span class=S>"00"</span>;
            <span class=K>WHEN</span> frame_ready =>
               frame_done_cld <= '1';
            <span class=K>WHEN</span> enable_new_frame =>
               enable_cld <= '1' ;
            <span class=K>WHEN</span> gun_write1 =>
               module_select_cld <= <span class=S>"01"</span>;
               write_cld <= '1';
               gun_px_idx_cld <= <span class=S>"01"</span>;
            <span class=K>WHEN</span> gun_write2 =>
               module_select_cld <= <span class=S>"01"</span>;
               write_cld <= '1' ;
               gun_px_idx_cld <= <span class=S>"10"</span>;
            <span class=K>WHEN</span> gun_write3 =>
               module_select_cld <= <span class=S>"01"</span> ;
               write_cld <= '1' ;
               gun_px_idx_cld <= <span class=S>"11"</span>;
            <span class=K>WHEN</span> bullet_write =>
               module_select_cld <= <span class=S>"10"</span> ;
               write_cld <= '1' ;
            <span class=K>WHEN</span> victory_effect0 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0000"</span>;
            <span class=K>WHEN</span> victory_effect1 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0001"</span>;
            <span class=K>WHEN</span> victory_effect2 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0010"</span>;
            <span class=K>WHEN</span> victory_effect3 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0011"</span>;
            <span class=K>WHEN</span> victory_effect4 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0100"</span>;
            <span class=K>WHEN</span> victory_effect5 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0101"</span>;
            <span class=K>WHEN</span> victory_effect6 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0110"</span>;
            <span class=K>WHEN</span> victory_effect7 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"0111"</span>;
            <span class=K>WHEN</span> victory_effect8 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1000"</span>;
            <span class=K>WHEN</span> victory_effect9 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1001"</span>;
            <span class=K>WHEN</span> victory_effect10 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1010"</span>;
            <span class=K>WHEN</span> victory_effect11 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1011"</span>;
            <span class=K>WHEN</span> victory_effect12 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1100"</span>;
            <span class=K>WHEN</span> victory_effect13 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1101"</span>;
            <span class=K>WHEN</span> victory_effect14 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1110"</span>;
            <span class=K>WHEN</span> victory_effect15 =>
               module_select_cld <= <span class=S>"11"</span> ;
               write_cld <= '1' ;
               victory_idx_cld <= <span class=S>"1111"</span>;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      alien_defeated,
      csm_timeout,
      current_state,
      gun_defeated,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s1 <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> s0 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= alien_write;
            <span class=K>ELSE</span>
               next_state <= s0;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> alien_write =>
            next_state <= gun_write;
         <span class=K>WHEN</span> gun_write =>
            next_state <= gun_write1;
         <span class=K>WHEN</span> frame_ready =>
            next_state <= enable_new_frame;
         <span class=K>WHEN</span> enable_new_frame =>
            next_state <= s1;
            csm_to_s1 <= '1';
         <span class=K>WHEN</span> s1 =>
            <span class=K>IF</span> (csm_timeout = '1' <span class=K>AND</span> (write_ready = '1' <span class=K>AND</span>
                (alien_defeated = '1' <span class=K>OR</span>
                gun_defeated = '1'))) <span class=K>THEN</span>
               next_state <= victory_effect0;
            <span class=K>ELSIF</span> (csm_timeout = '1' <span class=K>AND</span> (write_ready = '1')) <span class=K>THEN</span>
               next_state <= alien_write;
            <span class=K>ELSE</span>
               next_state <= s1;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> gun_write1 =>
            next_state <= gun_write2;
         <span class=K>WHEN</span> gun_write2 =>
            next_state <= gun_write3;
         <span class=K>WHEN</span> gun_write3 =>
            next_state <= bullet_write;
         <span class=K>WHEN</span> bullet_write =>
            next_state <= frame_ready;
         <span class=K>WHEN</span> victory_effect0 =>
            next_state <= victory_effect1;
         <span class=K>WHEN</span> victory_effect1 =>
            next_state <= victory_effect2;
         <span class=K>WHEN</span> victory_effect2 =>
            next_state <= victory_effect3;
         <span class=K>WHEN</span> victory_effect3 =>
            next_state <= victory_effect4;
         <span class=K>WHEN</span> victory_effect4 =>
            next_state <= victory_effect5;
         <span class=K>WHEN</span> victory_effect5 =>
            next_state <= victory_effect6;
         <span class=K>WHEN</span> victory_effect6 =>
            next_state <= victory_effect7;
         <span class=K>WHEN</span> victory_effect7 =>
            next_state <= victory_effect8;
         <span class=K>WHEN</span> victory_effect8 =>
            next_state <= victory_effect9;
         <span class=K>WHEN</span> victory_effect9 =>
            next_state <= victory_effect10;
         <span class=K>WHEN</span> victory_effect10 =>
            next_state <= victory_effect11;
         <span class=K>WHEN</span> victory_effect11 =>
            next_state <= victory_effect12;
         <span class=K>WHEN</span> victory_effect12 =>
            next_state <= victory_effect13;
         <span class=K>WHEN</span> victory_effect13 =>
            next_state <= victory_effect14;
         <span class=K>WHEN</span> victory_effect14 =>
            next_state <= victory_effect15;
         <span class=K>WHEN</span> victory_effect15 =>
            next_state <= frame_ready;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= s0;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s1
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s1 = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"100"</span>; <span class=C>-- no cycles(5)-1=4</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

   <span class=C>-- Concurrent Statements</span>
   <span class=C>-- Clocked output assignments</span>
   enable <= enable_cld;
   frame_done <= frame_done_cld;
   gun_px_idx <= gun_px_idx_cld;
   module_select <= module_select_cld;
   victory_idx <= victory_idx_cld;
   write <= write_cld;
<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>

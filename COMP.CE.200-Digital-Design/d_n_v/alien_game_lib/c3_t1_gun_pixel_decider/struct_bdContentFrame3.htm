<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 11:37:23 on 12/04/20 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_gun_pixel_decider.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop9.tuni.fi)</span>
<span class=C>--          at - 15:06:00 11&#47;23&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_gun_pixel_decider <span class=K>IS</span>
   <span class=K>PORT</span>(
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      x_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      x_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_gun_pixel_decider ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_gun_pixel_decider.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - kaakkola.kaakkola (linux-desktop9.tuni.fi)</span>
<span class=C>--          at - 15:06:00 11&#47;23&#47;20</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_gun_pixel_decider <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t2_left_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t2_left_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t2_left_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'y_coord_1' of 'constval'</span>
   dout <= <span class=S>"10000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'y_coord_2' of 'constval'</span>
   dout1 <= <span class=S>"01000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'mux'</span>
   u_0combo_proc: <span class=K>PROCESS</span>(x_in, dout2, dout4, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => x_coord <= x_in;
      <span class=K>WHEN</span> <span class=S>"01"</span> => x_coord <= dout2;
      <span class=K>WHEN</span> <span class=S>"10"</span> => x_coord <= x_in;
      <span class=K>WHEN</span> <span class=S>"11"</span> => x_coord <= dout4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => x_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(dout1, dout, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => y_coord <= dout1;
      <span class=K>WHEN</span> <span class=S>"01"</span> => y_coord <= dout;
      <span class=K>WHEN</span> <span class=S>"10"</span> => y_coord <= dout;
      <span class=K>WHEN</span> <span class=S>"11"</span> => y_coord <= dout;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => y_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_3 : c2_t2_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => x_in,
         data_out => dout4
      );
   U_2 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => x_in,
         data_out => dout2
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
